#!/usr/bin/python3
#+
# Generate epitrochoid and hypotrochoid patterns using Turtle graphics.
# For background, see <https://en.wikipedia.org/wiki/Spirograph>.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
from fractions import \
    Fraction
import time
import turtle
from turtle import \
    Vec2D
import getopt

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["color=", "frac=", "nrsteps=", "pause=", "pensize=", "ring=", "wheel="]
  )
color = None
pen_size = None
ring_radius = None
wheel_radius = None
wheel_frac = None
nr_steps = None
pause = None
for keyword, value in opts :
    if keyword == "--color" :
        color = value
    elif keyword == "--frac" :
        wheel_frac = float(value)
    elif keyword == "--nrsteps" :
        nr_steps = int(value)
    elif keyword == "--pause" :
        pause = float(value)
    elif keyword == "--pensize" :
        pen_size = float(value)
    elif keyword == "--ring" :
        ring_radius = int(value)
    elif keyword == "--wheel" :
        wheel_radius = int(value)
    #end if
#end for
# wheel_radius is +ve for epitrochoid, -ve for hypotrochoid
if (
        None in (pause, ring_radius, wheel_radius, wheel_frac, nr_steps)
    or
        wheel_radius + ring_radius <= 0
    or
        nr_steps <= 0
    or
        pause <= 0
) :
    raise getopt.GetoptError("invalid or missing parameters")
#end if
ratio = Fraction(ring_radius, wheel_radius)
print(ratio) # debug
nr_cycles = ratio.denominator

t = turtle.Turtle()
if color != None :
    t.color(color)
#end if
if pen_size != None :
    t.pensize(pen_size)
#end if
t.penup() # for first point
for i in range(0, nr_steps + 1) :
    theta_ring = 360 * nr_cycles * i / nr_steps
    theta_wheel = theta_ring * ring_radius / wheel_radius
    wheel_pos = Vec2D(ring_radius, 0).rotate(theta_ring)
    curve_pos = wheel_pos + Vec2D(wheel_radius * wheel_frac, 0).rotate(theta_wheel)
    t.setpos(curve_pos)
    t.pendown() # for subsequent points
#end for
time.sleep(pause)
