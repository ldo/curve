#!/usr/bin/python3
#+
# Generate epitrochoid and hypotrochoid patterns using Turtle graphics.
# For background, see <https://en.wikipedia.org/wiki/Spirograph>,
# <https://en.wikipedia.org/wiki/Epitrochoid> and <https://en.wikipedia.org/wiki/Hypotrochoid>.
# Invoke this script as follows:
#
#     troch [options] curvespec [curvespec...]
#
# where the only current option is
#
#     --pause=n
#         specifies how many seconds to pause after the drawing all the curves,
#         before closing the turtle window and existing.
#
# Each curvespec specifies the parameters for a curve to draw, and takes the form
#
#     keyword=value,keyword=value...
#
# where the valid keywords are
#
#     color
#         specifies the pen colour to use to draw the curve. Defaults to the
#         same as the previous curve, or black for the first curve.
#     pensize
#         specifies the width of the curve. Defaults to the same as the previous
#         curve, or 1 for the first curve.
#     ring (required)
#         specifies the radius of the stationary circle.
#     wheel (required)
#         specifies the radius of the moving circle.
#     frac (required)
#         specifies the fraction of the wheel radius from the centre of the wheel
#         at which the point is located that traces out the curve.
#     nrsteps (required)
#         the number of straight-line segments that make up the complete curve.
#         A larger number makes for a more accurate (smoother) curve, at the
#         expense of greater drawing time.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
from fractions import \
    Fraction
import time
import turtle
from turtle import \
    Vec2D
import getopt

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["color=", "frac=", "nrsteps=", "pause=", "pensize=", "ring=", "wheel="]
  )
pause = None
for keyword, value in opts :
    if keyword == "--pause" :
        pause = float(value)
    #end if
#end for
if pause == None or pause < 0 :
    raise getopt.GetoptError("invalid or missing parameters")
#end if

t = turtle.Turtle()
for arg in args :
    # note color and pen_size default to settings for previous curve, if any
    color = None
    pen_size = None
    ring_radius = None
    wheel_radius = None
    wheel_frac = None
    nr_steps = None
    for item in arg.split(",") :
        keyword, value = item.split("=", 1)
        if keyword == "color" :
            color = value
        elif keyword == "frac" :
            wheel_frac = float(value)
        elif keyword == "nrsteps" :
            nr_steps = int(value)
        elif keyword == "pensize" :
            pen_size = float(value)
        elif keyword == "ring" :
            ring_radius = int(value)
        elif keyword == "wheel" :
            wheel_radius = int(value)
        else :
            raise getopt.GetoptError("invalid curve keyword %s" % keyword)
        #end if
    #end for
    # wheel_radius is +ve for epitrochoid, -ve for hypotrochoid
    if (
            None in (ring_radius, wheel_radius, wheel_frac, nr_steps)
        or
            wheel_radius + ring_radius <= 0
        or
            nr_steps <= 0
    ) :
        raise getopt.GetoptError("invalid or missing curve parameters")
    #end if
    ratio = Fraction(ring_radius, wheel_radius)
    nr_cycles = ratio.denominator

    if color != None :
        t.color(color)
    #end if
    if pen_size != None :
        t.pensize(pen_size)
    #end if
    t.penup() # for first point
    for i in range(0, nr_steps + 1) :
        theta_ring = 360 * nr_cycles * i / nr_steps
        theta_wheel = theta_ring * ring_radius / wheel_radius
        wheel_pos = Vec2D(ring_radius, 0).rotate(theta_ring)
        curve_pos = wheel_pos + Vec2D(wheel_radius * wheel_frac, 0).rotate(theta_wheel)
        t.setpos(curve_pos)
        t.pendown() # for subsequent points
    #end for
#end for
time.sleep(pause)
